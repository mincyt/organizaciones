// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.gob.mincyt.organizaciones.web;

import ar.gob.mincyt.organizaciones.domain.Estado;
import ar.gob.mincyt.organizaciones.domain.Idioma;
import ar.gob.mincyt.organizaciones.web.IdiomaBean;
import ar.gob.mincyt.organizaciones.web.converter.EstadoConverter;
import ar.gob.mincyt.organizaciones.web.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect IdiomaBean_Roo_ManagedBean {
    
    declare @type: IdiomaBean: @ManagedBean(name = "idiomaBean");
    
    declare @type: IdiomaBean: @SessionScoped;
    
    private String IdiomaBean.name = "Idiomas";
    
    private Idioma IdiomaBean.idioma;
    
    private List<Idioma> IdiomaBean.allIdiomas;
    
    private boolean IdiomaBean.dataVisible = false;
    
    private List<String> IdiomaBean.columns;
    
    private HtmlPanelGrid IdiomaBean.createPanelGrid;
    
    private HtmlPanelGrid IdiomaBean.editPanelGrid;
    
    private HtmlPanelGrid IdiomaBean.viewPanelGrid;
    
    private boolean IdiomaBean.createDialogVisible = false;
    
    @PostConstruct
    public void IdiomaBean.init() {
        columns = new ArrayList<String>();
        columns.add("denominacion");
        columns.add("identificadorISO");
        columns.add("nombreISO");
    }
    
    public String IdiomaBean.getName() {
        return name;
    }
    
    public List<String> IdiomaBean.getColumns() {
        return columns;
    }
    
    public List<Idioma> IdiomaBean.getAllIdiomas() {
        return allIdiomas;
    }
    
    public void IdiomaBean.setAllIdiomas(List<Idioma> allIdiomas) {
        this.allIdiomas = allIdiomas;
    }
    
    public String IdiomaBean.findAllIdiomas() {
        allIdiomas = Idioma.findAllIdiomas();
        dataVisible = !allIdiomas.isEmpty();
        return null;
    }
    
    public boolean IdiomaBean.isDataVisible() {
        return dataVisible;
    }
    
    public void IdiomaBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid IdiomaBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void IdiomaBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid IdiomaBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void IdiomaBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid IdiomaBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void IdiomaBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid IdiomaBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel denominacionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        denominacionCreateOutput.setFor("denominacionCreateInput");
        denominacionCreateOutput.setId("denominacionCreateOutput");
        denominacionCreateOutput.setValue("Denominacion:");
        htmlPanelGrid.getChildren().add(denominacionCreateOutput);
        
        InputText denominacionCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        denominacionCreateInput.setId("denominacionCreateInput");
        denominacionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{idiomaBean.idioma.denominacion}", String.class));
        denominacionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(denominacionCreateInput);
        
        Message denominacionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        denominacionCreateInputMessage.setId("denominacionCreateInputMessage");
        denominacionCreateInputMessage.setFor("denominacionCreateInput");
        denominacionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(denominacionCreateInputMessage);
        
        OutputLabel identificadorISOCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        identificadorISOCreateOutput.setFor("identificadorISOCreateInput");
        identificadorISOCreateOutput.setId("identificadorISOCreateOutput");
        identificadorISOCreateOutput.setValue("Identificador I S O:");
        htmlPanelGrid.getChildren().add(identificadorISOCreateOutput);
        
        InputText identificadorISOCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        identificadorISOCreateInput.setId("identificadorISOCreateInput");
        identificadorISOCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{idiomaBean.idioma.identificadorISO}", String.class));
        identificadorISOCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(identificadorISOCreateInput);
        
        Message identificadorISOCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        identificadorISOCreateInputMessage.setId("identificadorISOCreateInputMessage");
        identificadorISOCreateInputMessage.setFor("identificadorISOCreateInput");
        identificadorISOCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(identificadorISOCreateInputMessage);
        
        OutputLabel nombreISOCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nombreISOCreateOutput.setFor("nombreISOCreateInput");
        nombreISOCreateOutput.setId("nombreISOCreateOutput");
        nombreISOCreateOutput.setValue("Nombre I S O:");
        htmlPanelGrid.getChildren().add(nombreISOCreateOutput);
        
        InputText nombreISOCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nombreISOCreateInput.setId("nombreISOCreateInput");
        nombreISOCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{idiomaBean.idioma.nombreISO}", String.class));
        nombreISOCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nombreISOCreateInput);
        
        Message nombreISOCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nombreISOCreateInputMessage.setId("nombreISOCreateInputMessage");
        nombreISOCreateInputMessage.setFor("nombreISOCreateInput");
        nombreISOCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nombreISOCreateInputMessage);
        
        OutputLabel estadoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        estadoCreateOutput.setFor("estadoCreateInput");
        estadoCreateOutput.setId("estadoCreateOutput");
        estadoCreateOutput.setValue("Estado:");
        htmlPanelGrid.getChildren().add(estadoCreateOutput);
        
        AutoComplete estadoCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        estadoCreateInput.setId("estadoCreateInput");
        estadoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{idiomaBean.idioma.estado}", Estado.class));
        estadoCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{idiomaBean.completeEstado}", List.class, new Class[] { String.class }));
        estadoCreateInput.setDropdown(true);
        estadoCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "estado", String.class));
        estadoCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{estado.denominacion} #{estado.estadoid}", String.class));
        estadoCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{estado}", Estado.class));
        estadoCreateInput.setConverter(new EstadoConverter());
        estadoCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(estadoCreateInput);
        
        Message estadoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        estadoCreateInputMessage.setId("estadoCreateInputMessage");
        estadoCreateInputMessage.setFor("estadoCreateInput");
        estadoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(estadoCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid IdiomaBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel denominacionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        denominacionEditOutput.setFor("denominacionEditInput");
        denominacionEditOutput.setId("denominacionEditOutput");
        denominacionEditOutput.setValue("Denominacion:");
        htmlPanelGrid.getChildren().add(denominacionEditOutput);
        
        InputText denominacionEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        denominacionEditInput.setId("denominacionEditInput");
        denominacionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{idiomaBean.idioma.denominacion}", String.class));
        denominacionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(denominacionEditInput);
        
        Message denominacionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        denominacionEditInputMessage.setId("denominacionEditInputMessage");
        denominacionEditInputMessage.setFor("denominacionEditInput");
        denominacionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(denominacionEditInputMessage);
        
        OutputLabel identificadorISOEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        identificadorISOEditOutput.setFor("identificadorISOEditInput");
        identificadorISOEditOutput.setId("identificadorISOEditOutput");
        identificadorISOEditOutput.setValue("Identificador I S O:");
        htmlPanelGrid.getChildren().add(identificadorISOEditOutput);
        
        InputText identificadorISOEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        identificadorISOEditInput.setId("identificadorISOEditInput");
        identificadorISOEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{idiomaBean.idioma.identificadorISO}", String.class));
        identificadorISOEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(identificadorISOEditInput);
        
        Message identificadorISOEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        identificadorISOEditInputMessage.setId("identificadorISOEditInputMessage");
        identificadorISOEditInputMessage.setFor("identificadorISOEditInput");
        identificadorISOEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(identificadorISOEditInputMessage);
        
        OutputLabel nombreISOEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        nombreISOEditOutput.setFor("nombreISOEditInput");
        nombreISOEditOutput.setId("nombreISOEditOutput");
        nombreISOEditOutput.setValue("Nombre I S O:");
        htmlPanelGrid.getChildren().add(nombreISOEditOutput);
        
        InputText nombreISOEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        nombreISOEditInput.setId("nombreISOEditInput");
        nombreISOEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{idiomaBean.idioma.nombreISO}", String.class));
        nombreISOEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(nombreISOEditInput);
        
        Message nombreISOEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nombreISOEditInputMessage.setId("nombreISOEditInputMessage");
        nombreISOEditInputMessage.setFor("nombreISOEditInput");
        nombreISOEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nombreISOEditInputMessage);
        
        OutputLabel estadoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        estadoEditOutput.setFor("estadoEditInput");
        estadoEditOutput.setId("estadoEditOutput");
        estadoEditOutput.setValue("Estado:");
        htmlPanelGrid.getChildren().add(estadoEditOutput);
        
        AutoComplete estadoEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        estadoEditInput.setId("estadoEditInput");
        estadoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{idiomaBean.idioma.estado}", Estado.class));
        estadoEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{idiomaBean.completeEstado}", List.class, new Class[] { String.class }));
        estadoEditInput.setDropdown(true);
        estadoEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "estado", String.class));
        estadoEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{estado.denominacion} #{estado.estadoid}", String.class));
        estadoEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{estado}", Estado.class));
        estadoEditInput.setConverter(new EstadoConverter());
        estadoEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(estadoEditInput);
        
        Message estadoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        estadoEditInputMessage.setId("estadoEditInputMessage");
        estadoEditInputMessage.setFor("estadoEditInput");
        estadoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(estadoEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid IdiomaBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText denominacionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        denominacionLabel.setId("denominacionLabel");
        denominacionLabel.setValue("Denominacion:");
        htmlPanelGrid.getChildren().add(denominacionLabel);
        
        HtmlOutputText denominacionValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        denominacionValue.setId("denominacionValue");
        denominacionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{idiomaBean.idioma.denominacion}", String.class));
        htmlPanelGrid.getChildren().add(denominacionValue);
        
        HtmlOutputText identificadorISOLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        identificadorISOLabel.setId("identificadorISOLabel");
        identificadorISOLabel.setValue("Identificador I S O:");
        htmlPanelGrid.getChildren().add(identificadorISOLabel);
        
        HtmlOutputText identificadorISOValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        identificadorISOValue.setId("identificadorISOValue");
        identificadorISOValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{idiomaBean.idioma.identificadorISO}", String.class));
        htmlPanelGrid.getChildren().add(identificadorISOValue);
        
        HtmlOutputText nombreISOLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreISOLabel.setId("nombreISOLabel");
        nombreISOLabel.setValue("Nombre I S O:");
        htmlPanelGrid.getChildren().add(nombreISOLabel);
        
        HtmlOutputText nombreISOValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreISOValue.setId("nombreISOValue");
        nombreISOValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{idiomaBean.idioma.nombreISO}", String.class));
        htmlPanelGrid.getChildren().add(nombreISOValue);
        
        HtmlOutputText estadoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        estadoLabel.setId("estadoLabel");
        estadoLabel.setValue("Estado:");
        htmlPanelGrid.getChildren().add(estadoLabel);
        
        HtmlOutputText estadoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        estadoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{idiomaBean.idioma.estado}", Estado.class));
        estadoValue.setConverter(new EstadoConverter());
        htmlPanelGrid.getChildren().add(estadoValue);
        
        return htmlPanelGrid;
    }
    
    public Idioma IdiomaBean.getIdioma() {
        if (idioma == null) {
            idioma = new Idioma();
        }
        return idioma;
    }
    
    public void IdiomaBean.setIdioma(Idioma idioma) {
        this.idioma = idioma;
    }
    
    public List<Estado> IdiomaBean.completeEstado(String query) {
        List<Estado> suggestions = new ArrayList<Estado>();
        for (Estado estado : Estado.findAllEstadoes()) {
            String estadoStr = String.valueOf(estado.getDenominacion() +  " "  + estado.getEstadoid());
            if (estadoStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(estado);
            }
        }
        return suggestions;
    }
    
    public String IdiomaBean.onEdit() {
        return null;
    }
    
    public boolean IdiomaBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void IdiomaBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String IdiomaBean.displayList() {
        createDialogVisible = false;
        findAllIdiomas();
        return "idioma";
    }
    
    public String IdiomaBean.displayCreateDialog() {
        idioma = new Idioma();
        createDialogVisible = true;
        return "idioma";
    }
    
    public String IdiomaBean.persist() {
        String message = "";
        if (idioma.getIdiomaid() != null) {
            idioma.merge();
            message = "message_successfully_updated";
        } else {
            idioma.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Idioma");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllIdiomas();
    }
    
    public String IdiomaBean.delete() {
        idioma.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Idioma");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllIdiomas();
    }
    
    public void IdiomaBean.reset() {
        idioma = null;
        createDialogVisible = false;
    }
    
    public void IdiomaBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
