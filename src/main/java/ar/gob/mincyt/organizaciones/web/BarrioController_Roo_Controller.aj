// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.gob.mincyt.organizaciones.web;

import ar.gob.mincyt.organizaciones.domain.Barrio;
import ar.gob.mincyt.organizaciones.domain.Estado;
import ar.gob.mincyt.organizaciones.service.BarrioService;
import ar.gob.mincyt.organizaciones.service.CiudadService;
import ar.gob.mincyt.organizaciones.service.EstadoService;
import ar.gob.mincyt.organizaciones.web.BarrioController;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect BarrioController_Roo_Controller {
    
    @Autowired
    EstadoService BarrioController.estadoService;
    
    @Autowired
    BarrioService BarrioController.barrioService;
    
    @Autowired
    CiudadService BarrioController.ciudadService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String BarrioController.create(@Valid Barrio barrio, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, barrio);
            return "barrios/create";
        }
        uiModel.asMap().clear();
        barrioService.saveBarrio(barrio);
        return "redirect:/barrios/" + encodeUrlPathSegment(barrio.getBarrioid().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String BarrioController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Barrio());
        List<String[]> dependencies = new ArrayList<String[]>();
        if (estadoService.countAllEstados() == 0) {
            dependencies.add(new String[] { "estado", "estados" });
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "barrios/create";
    }
    
    @RequestMapping(value = "/{barrioid}", produces = "text/html")
    public String BarrioController.show(@PathVariable("barrioid") Long barrioid, Model uiModel) {
        uiModel.addAttribute("barrio", barrioService.findBarrio(barrioid));
        uiModel.addAttribute("itemId", barrioid);
        return "barrios/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String BarrioController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("barrios", barrioService.findBarrioEntries(firstResult, sizeNo));
            float nrOfPages = (float) barrioService.countAllBarrios() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("barrios", barrioService.findAllBarrios());
        }
        return "barrios/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String BarrioController.update(@Valid Barrio barrio, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, barrio);
            return "barrios/update";
        }
        uiModel.asMap().clear();
        barrioService.updateBarrio(barrio);
        return "redirect:/barrios/" + encodeUrlPathSegment(barrio.getBarrioid().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{barrioid}", params = "form", produces = "text/html")
    public String BarrioController.updateForm(@PathVariable("barrioid") Long barrioid, Model uiModel) {
        populateEditForm(uiModel, barrioService.findBarrio(barrioid));
        return "barrios/update";
    }
    
    @RequestMapping(value = "/{barrioid}", method = RequestMethod.DELETE, produces = "text/html")
    public String BarrioController.delete(@PathVariable("barrioid") Long barrioid, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Barrio barrio = barrioService.findBarrio(barrioid);
        barrioService.deleteBarrio(barrio);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/barrios";
    }
    
    void BarrioController.populateEditForm(Model uiModel, Barrio barrio) {
        uiModel.addAttribute("barrio", barrio);
        uiModel.addAttribute("ciudades", ciudadService.findAllCiudades());
        uiModel.addAttribute("estados", estadoService.findAllEstados());
    }
    
    String BarrioController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
