// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.gob.mincyt.organizaciones.web;

import ar.gob.mincyt.organizaciones.domain.Estado;
import ar.gob.mincyt.organizaciones.domain.TipoDeCategoria;
import ar.gob.mincyt.organizaciones.service.EstadoService;
import ar.gob.mincyt.organizaciones.service.TipoDeCategoriaService;
import ar.gob.mincyt.organizaciones.web.TipoDeCategoriaController;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect TipoDeCategoriaController_Roo_Controller {
    
    @Autowired
    EstadoService TipoDeCategoriaController.estadoService;
    
    @Autowired
    TipoDeCategoriaService TipoDeCategoriaController.tipoDeCategoriaService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String TipoDeCategoriaController.create(@Valid TipoDeCategoria tipoDeCategoria, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, tipoDeCategoria);
            return "tiposdecategorias/create";
        }
        uiModel.asMap().clear();
        tipoDeCategoriaService.saveTipoDeCategoria(tipoDeCategoria);
        return "redirect:/tiposdecategorias/" + encodeUrlPathSegment(tipoDeCategoria.getTipodecategoriaid().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String TipoDeCategoriaController.createForm(Model uiModel) {
        populateEditForm(uiModel, new TipoDeCategoria());
        List<String[]> dependencies = new ArrayList<String[]>();
        if (estadoService.countAllEstados() == 0) {
            dependencies.add(new String[] { "estado", "estados" });
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "tiposdecategorias/create";
    }
    
    @RequestMapping(value = "/{tipodecategoriaid}", produces = "text/html")
    public String TipoDeCategoriaController.show(@PathVariable("tipodecategoriaid") Long tipodecategoriaid, Model uiModel) {
        uiModel.addAttribute("tipodecategoria", tipoDeCategoriaService.findTipoDeCategoria(tipodecategoriaid));
        uiModel.addAttribute("itemId", tipodecategoriaid);
        return "tiposdecategorias/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String TipoDeCategoriaController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, @RequestParam(value = "sortFieldName", required = false) String sortFieldName, @RequestParam(value = "sortOrder", required = false) String sortOrder, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("tiposdecategorias", tipoDeCategoriaService.findTipoDeCategoriaEntries(firstResult, sizeNo));
            float nrOfPages = (float) tipoDeCategoriaService.countAllTiposDeCategorias() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("tiposdecategorias", tipoDeCategoriaService.findAllTiposDeCategorias());
        }
        return "tiposdecategorias/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String TipoDeCategoriaController.update(@Valid TipoDeCategoria tipoDeCategoria, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, tipoDeCategoria);
            return "tiposdecategorias/update";
        }
        uiModel.asMap().clear();
        tipoDeCategoriaService.updateTipoDeCategoria(tipoDeCategoria);
        return "redirect:/tiposdecategorias/" + encodeUrlPathSegment(tipoDeCategoria.getTipodecategoriaid().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{tipodecategoriaid}", params = "form", produces = "text/html")
    public String TipoDeCategoriaController.updateForm(@PathVariable("tipodecategoriaid") Long tipodecategoriaid, Model uiModel) {
        populateEditForm(uiModel, tipoDeCategoriaService.findTipoDeCategoria(tipodecategoriaid));
        return "tiposdecategorias/update";
    }
    
    @RequestMapping(value = "/{tipodecategoriaid}", method = RequestMethod.DELETE, produces = "text/html")
    public String TipoDeCategoriaController.delete(@PathVariable("tipodecategoriaid") Long tipodecategoriaid, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        TipoDeCategoria tipoDeCategoria = tipoDeCategoriaService.findTipoDeCategoria(tipodecategoriaid);
        tipoDeCategoriaService.deleteTipoDeCategoria(tipoDeCategoria);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/tiposdecategorias";
    }
    
    void TipoDeCategoriaController.populateEditForm(Model uiModel, TipoDeCategoria tipoDeCategoria) {
        uiModel.addAttribute("tipoDeCategoria", tipoDeCategoria);
        uiModel.addAttribute("estados", estadoService.findAllEstados());
    }
    
    String TipoDeCategoriaController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
