// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.gob.mincyt.organizaciones.web;

import ar.gob.mincyt.organizaciones.domain.Estado;
import ar.gob.mincyt.organizaciones.domain.Idioma;
import ar.gob.mincyt.organizaciones.domain.NombreDeOrganizacion;
import ar.gob.mincyt.organizaciones.domain.Organizacion;
import ar.gob.mincyt.organizaciones.web.NombreDeOrganizacionBean;
import ar.gob.mincyt.organizaciones.web.converter.EstadoConverter;
import ar.gob.mincyt.organizaciones.web.converter.IdiomaConverter;
import ar.gob.mincyt.organizaciones.web.converter.OrganizacionConverter;
import ar.gob.mincyt.organizaciones.web.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectbooleancheckbox.SelectBooleanCheckbox;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect NombreDeOrganizacionBean_Roo_ManagedBean {
    
    declare @type: NombreDeOrganizacionBean: @ManagedBean(name = "nombreDeOrganizacionBean");
    
    declare @type: NombreDeOrganizacionBean: @SessionScoped;
    
    private String NombreDeOrganizacionBean.name = "NombreDeOrganizacions";
    
    private NombreDeOrganizacion NombreDeOrganizacionBean.nombreDeOrganizacion;
    
    private List<NombreDeOrganizacion> NombreDeOrganizacionBean.allNombreDeOrganizacions;
    
    private boolean NombreDeOrganizacionBean.dataVisible = false;
    
    private List<String> NombreDeOrganizacionBean.columns;
    
    private HtmlPanelGrid NombreDeOrganizacionBean.createPanelGrid;
    
    private HtmlPanelGrid NombreDeOrganizacionBean.editPanelGrid;
    
    private HtmlPanelGrid NombreDeOrganizacionBean.viewPanelGrid;
    
    private boolean NombreDeOrganizacionBean.createDialogVisible = false;
    
    @PostConstruct
    public void NombreDeOrganizacionBean.init() {
        columns = new ArrayList<String>();
        columns.add("denominacion");
    }
    
    public String NombreDeOrganizacionBean.getName() {
        return name;
    }
    
    public List<String> NombreDeOrganizacionBean.getColumns() {
        return columns;
    }
    
    public List<NombreDeOrganizacion> NombreDeOrganizacionBean.getAllNombreDeOrganizacions() {
        return allNombreDeOrganizacions;
    }
    
    public void NombreDeOrganizacionBean.setAllNombreDeOrganizacions(List<NombreDeOrganizacion> allNombreDeOrganizacions) {
        this.allNombreDeOrganizacions = allNombreDeOrganizacions;
    }
    
    public String NombreDeOrganizacionBean.findAllNombreDeOrganizacions() {
        allNombreDeOrganizacions = NombreDeOrganizacion.findAllNombreDeOrganizacions();
        dataVisible = !allNombreDeOrganizacions.isEmpty();
        return null;
    }
    
    public boolean NombreDeOrganizacionBean.isDataVisible() {
        return dataVisible;
    }
    
    public void NombreDeOrganizacionBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid NombreDeOrganizacionBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void NombreDeOrganizacionBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid NombreDeOrganizacionBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void NombreDeOrganizacionBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid NombreDeOrganizacionBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void NombreDeOrganizacionBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid NombreDeOrganizacionBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel denominacionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        denominacionCreateOutput.setFor("denominacionCreateInput");
        denominacionCreateOutput.setId("denominacionCreateOutput");
        denominacionCreateOutput.setValue("Denominacion:");
        htmlPanelGrid.getChildren().add(denominacionCreateOutput);
        
        InputText denominacionCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        denominacionCreateInput.setId("denominacionCreateInput");
        denominacionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{nombreDeOrganizacionBean.nombreDeOrganizacion.denominacion}", String.class));
        denominacionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(denominacionCreateInput);
        
        Message denominacionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        denominacionCreateInputMessage.setId("denominacionCreateInputMessage");
        denominacionCreateInputMessage.setFor("denominacionCreateInput");
        denominacionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(denominacionCreateInputMessage);
        
        OutputLabel esSiglaCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        esSiglaCreateOutput.setFor("esSiglaCreateInput");
        esSiglaCreateOutput.setId("esSiglaCreateOutput");
        esSiglaCreateOutput.setValue("Es Sigla:");
        htmlPanelGrid.getChildren().add(esSiglaCreateOutput);
        
        SelectBooleanCheckbox esSiglaCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        esSiglaCreateInput.setId("esSiglaCreateInput");
        esSiglaCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{nombreDeOrganizacionBean.nombreDeOrganizacion.esSigla}", Boolean.class));
        esSiglaCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(esSiglaCreateInput);
        
        Message esSiglaCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        esSiglaCreateInputMessage.setId("esSiglaCreateInputMessage");
        esSiglaCreateInputMessage.setFor("esSiglaCreateInput");
        esSiglaCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(esSiglaCreateInputMessage);
        
        OutputLabel esDenominacionPreferidaCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        esDenominacionPreferidaCreateOutput.setFor("esDenominacionPreferidaCreateInput");
        esDenominacionPreferidaCreateOutput.setId("esDenominacionPreferidaCreateOutput");
        esDenominacionPreferidaCreateOutput.setValue("Es Denominacion Preferida:");
        htmlPanelGrid.getChildren().add(esDenominacionPreferidaCreateOutput);
        
        SelectBooleanCheckbox esDenominacionPreferidaCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        esDenominacionPreferidaCreateInput.setId("esDenominacionPreferidaCreateInput");
        esDenominacionPreferidaCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{nombreDeOrganizacionBean.nombreDeOrganizacion.esDenominacionPreferida}", Boolean.class));
        esDenominacionPreferidaCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(esDenominacionPreferidaCreateInput);
        
        Message esDenominacionPreferidaCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        esDenominacionPreferidaCreateInputMessage.setId("esDenominacionPreferidaCreateInputMessage");
        esDenominacionPreferidaCreateInputMessage.setFor("esDenominacionPreferidaCreateInput");
        esDenominacionPreferidaCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(esDenominacionPreferidaCreateInputMessage);
        
        OutputLabel organizacionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        organizacionCreateOutput.setFor("organizacionCreateInput");
        organizacionCreateOutput.setId("organizacionCreateOutput");
        organizacionCreateOutput.setValue("Organizacion:");
        htmlPanelGrid.getChildren().add(organizacionCreateOutput);
        
        AutoComplete organizacionCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        organizacionCreateInput.setId("organizacionCreateInput");
        organizacionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{nombreDeOrganizacionBean.nombreDeOrganizacion.organizacion}", Organizacion.class));
        organizacionCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{nombreDeOrganizacionBean.completeOrganizacion}", List.class, new Class[] { String.class }));
        organizacionCreateInput.setDropdown(true);
        organizacionCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "organizacion", String.class));
        organizacionCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{organizacion.fechaDeInicio} #{organizacion.fechaDeFinalizacion} #{organizacion.organizacionid}", String.class));
        organizacionCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{organizacion}", Organizacion.class));
        organizacionCreateInput.setConverter(new OrganizacionConverter());
        organizacionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(organizacionCreateInput);
        
        Message organizacionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        organizacionCreateInputMessage.setId("organizacionCreateInputMessage");
        organizacionCreateInputMessage.setFor("organizacionCreateInput");
        organizacionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(organizacionCreateInputMessage);
        
        OutputLabel idiomaCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        idiomaCreateOutput.setFor("idiomaCreateInput");
        idiomaCreateOutput.setId("idiomaCreateOutput");
        idiomaCreateOutput.setValue("Idioma:");
        htmlPanelGrid.getChildren().add(idiomaCreateOutput);
        
        AutoComplete idiomaCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        idiomaCreateInput.setId("idiomaCreateInput");
        idiomaCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{nombreDeOrganizacionBean.nombreDeOrganizacion.idioma}", Idioma.class));
        idiomaCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{nombreDeOrganizacionBean.completeIdioma}", List.class, new Class[] { String.class }));
        idiomaCreateInput.setDropdown(true);
        idiomaCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "idioma", String.class));
        idiomaCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{idioma.denominacion} #{idioma.identificadorISO} #{idioma.nombreISO} #{idioma.idiomaid}", String.class));
        idiomaCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{idioma}", Idioma.class));
        idiomaCreateInput.setConverter(new IdiomaConverter());
        idiomaCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(idiomaCreateInput);
        
        Message idiomaCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        idiomaCreateInputMessage.setId("idiomaCreateInputMessage");
        idiomaCreateInputMessage.setFor("idiomaCreateInput");
        idiomaCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(idiomaCreateInputMessage);
        
        OutputLabel estadoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        estadoCreateOutput.setFor("estadoCreateInput");
        estadoCreateOutput.setId("estadoCreateOutput");
        estadoCreateOutput.setValue("Estado:");
        htmlPanelGrid.getChildren().add(estadoCreateOutput);
        
        AutoComplete estadoCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        estadoCreateInput.setId("estadoCreateInput");
        estadoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{nombreDeOrganizacionBean.nombreDeOrganizacion.estado}", Estado.class));
        estadoCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{nombreDeOrganizacionBean.completeEstado}", List.class, new Class[] { String.class }));
        estadoCreateInput.setDropdown(true);
        estadoCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "estado", String.class));
        estadoCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{estado.denominacion} #{estado.estadoid}", String.class));
        estadoCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{estado}", Estado.class));
        estadoCreateInput.setConverter(new EstadoConverter());
        estadoCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(estadoCreateInput);
        
        Message estadoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        estadoCreateInputMessage.setId("estadoCreateInputMessage");
        estadoCreateInputMessage.setFor("estadoCreateInput");
        estadoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(estadoCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid NombreDeOrganizacionBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel denominacionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        denominacionEditOutput.setFor("denominacionEditInput");
        denominacionEditOutput.setId("denominacionEditOutput");
        denominacionEditOutput.setValue("Denominacion:");
        htmlPanelGrid.getChildren().add(denominacionEditOutput);
        
        InputText denominacionEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        denominacionEditInput.setId("denominacionEditInput");
        denominacionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{nombreDeOrganizacionBean.nombreDeOrganizacion.denominacion}", String.class));
        denominacionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(denominacionEditInput);
        
        Message denominacionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        denominacionEditInputMessage.setId("denominacionEditInputMessage");
        denominacionEditInputMessage.setFor("denominacionEditInput");
        denominacionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(denominacionEditInputMessage);
        
        OutputLabel esSiglaEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        esSiglaEditOutput.setFor("esSiglaEditInput");
        esSiglaEditOutput.setId("esSiglaEditOutput");
        esSiglaEditOutput.setValue("Es Sigla:");
        htmlPanelGrid.getChildren().add(esSiglaEditOutput);
        
        SelectBooleanCheckbox esSiglaEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        esSiglaEditInput.setId("esSiglaEditInput");
        esSiglaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{nombreDeOrganizacionBean.nombreDeOrganizacion.esSigla}", Boolean.class));
        esSiglaEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(esSiglaEditInput);
        
        Message esSiglaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        esSiglaEditInputMessage.setId("esSiglaEditInputMessage");
        esSiglaEditInputMessage.setFor("esSiglaEditInput");
        esSiglaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(esSiglaEditInputMessage);
        
        OutputLabel esDenominacionPreferidaEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        esDenominacionPreferidaEditOutput.setFor("esDenominacionPreferidaEditInput");
        esDenominacionPreferidaEditOutput.setId("esDenominacionPreferidaEditOutput");
        esDenominacionPreferidaEditOutput.setValue("Es Denominacion Preferida:");
        htmlPanelGrid.getChildren().add(esDenominacionPreferidaEditOutput);
        
        SelectBooleanCheckbox esDenominacionPreferidaEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        esDenominacionPreferidaEditInput.setId("esDenominacionPreferidaEditInput");
        esDenominacionPreferidaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{nombreDeOrganizacionBean.nombreDeOrganizacion.esDenominacionPreferida}", Boolean.class));
        esDenominacionPreferidaEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(esDenominacionPreferidaEditInput);
        
        Message esDenominacionPreferidaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        esDenominacionPreferidaEditInputMessage.setId("esDenominacionPreferidaEditInputMessage");
        esDenominacionPreferidaEditInputMessage.setFor("esDenominacionPreferidaEditInput");
        esDenominacionPreferidaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(esDenominacionPreferidaEditInputMessage);
        
        OutputLabel organizacionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        organizacionEditOutput.setFor("organizacionEditInput");
        organizacionEditOutput.setId("organizacionEditOutput");
        organizacionEditOutput.setValue("Organizacion:");
        htmlPanelGrid.getChildren().add(organizacionEditOutput);
        
        AutoComplete organizacionEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        organizacionEditInput.setId("organizacionEditInput");
        organizacionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{nombreDeOrganizacionBean.nombreDeOrganizacion.organizacion}", Organizacion.class));
        organizacionEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{nombreDeOrganizacionBean.completeOrganizacion}", List.class, new Class[] { String.class }));
        organizacionEditInput.setDropdown(true);
        organizacionEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "organizacion", String.class));
        organizacionEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{organizacion.fechaDeInicio} #{organizacion.fechaDeFinalizacion} #{organizacion.organizacionid}", String.class));
        organizacionEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{organizacion}", Organizacion.class));
        organizacionEditInput.setConverter(new OrganizacionConverter());
        organizacionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(organizacionEditInput);
        
        Message organizacionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        organizacionEditInputMessage.setId("organizacionEditInputMessage");
        organizacionEditInputMessage.setFor("organizacionEditInput");
        organizacionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(organizacionEditInputMessage);
        
        OutputLabel idiomaEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        idiomaEditOutput.setFor("idiomaEditInput");
        idiomaEditOutput.setId("idiomaEditOutput");
        idiomaEditOutput.setValue("Idioma:");
        htmlPanelGrid.getChildren().add(idiomaEditOutput);
        
        AutoComplete idiomaEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        idiomaEditInput.setId("idiomaEditInput");
        idiomaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{nombreDeOrganizacionBean.nombreDeOrganizacion.idioma}", Idioma.class));
        idiomaEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{nombreDeOrganizacionBean.completeIdioma}", List.class, new Class[] { String.class }));
        idiomaEditInput.setDropdown(true);
        idiomaEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "idioma", String.class));
        idiomaEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{idioma.denominacion} #{idioma.identificadorISO} #{idioma.nombreISO} #{idioma.idiomaid}", String.class));
        idiomaEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{idioma}", Idioma.class));
        idiomaEditInput.setConverter(new IdiomaConverter());
        idiomaEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(idiomaEditInput);
        
        Message idiomaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        idiomaEditInputMessage.setId("idiomaEditInputMessage");
        idiomaEditInputMessage.setFor("idiomaEditInput");
        idiomaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(idiomaEditInputMessage);
        
        OutputLabel estadoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        estadoEditOutput.setFor("estadoEditInput");
        estadoEditOutput.setId("estadoEditOutput");
        estadoEditOutput.setValue("Estado:");
        htmlPanelGrid.getChildren().add(estadoEditOutput);
        
        AutoComplete estadoEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        estadoEditInput.setId("estadoEditInput");
        estadoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{nombreDeOrganizacionBean.nombreDeOrganizacion.estado}", Estado.class));
        estadoEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{nombreDeOrganizacionBean.completeEstado}", List.class, new Class[] { String.class }));
        estadoEditInput.setDropdown(true);
        estadoEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "estado", String.class));
        estadoEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{estado.denominacion} #{estado.estadoid}", String.class));
        estadoEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{estado}", Estado.class));
        estadoEditInput.setConverter(new EstadoConverter());
        estadoEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(estadoEditInput);
        
        Message estadoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        estadoEditInputMessage.setId("estadoEditInputMessage");
        estadoEditInputMessage.setFor("estadoEditInput");
        estadoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(estadoEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid NombreDeOrganizacionBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText denominacionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        denominacionLabel.setId("denominacionLabel");
        denominacionLabel.setValue("Denominacion:");
        htmlPanelGrid.getChildren().add(denominacionLabel);
        
        HtmlOutputText denominacionValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        denominacionValue.setId("denominacionValue");
        denominacionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{nombreDeOrganizacionBean.nombreDeOrganizacion.denominacion}", String.class));
        htmlPanelGrid.getChildren().add(denominacionValue);
        
        HtmlOutputText esSiglaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        esSiglaLabel.setId("esSiglaLabel");
        esSiglaLabel.setValue("Es Sigla:");
        htmlPanelGrid.getChildren().add(esSiglaLabel);
        
        HtmlOutputText esSiglaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        esSiglaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{nombreDeOrganizacionBean.nombreDeOrganizacion.esSigla}", String.class));
        htmlPanelGrid.getChildren().add(esSiglaValue);
        
        HtmlOutputText esDenominacionPreferidaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        esDenominacionPreferidaLabel.setId("esDenominacionPreferidaLabel");
        esDenominacionPreferidaLabel.setValue("Es Denominacion Preferida:");
        htmlPanelGrid.getChildren().add(esDenominacionPreferidaLabel);
        
        HtmlOutputText esDenominacionPreferidaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        esDenominacionPreferidaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{nombreDeOrganizacionBean.nombreDeOrganizacion.esDenominacionPreferida}", String.class));
        htmlPanelGrid.getChildren().add(esDenominacionPreferidaValue);
        
        HtmlOutputText organizacionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        organizacionLabel.setId("organizacionLabel");
        organizacionLabel.setValue("Organizacion:");
        htmlPanelGrid.getChildren().add(organizacionLabel);
        
        HtmlOutputText organizacionValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        organizacionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{nombreDeOrganizacionBean.nombreDeOrganizacion.organizacion}", Organizacion.class));
        organizacionValue.setConverter(new OrganizacionConverter());
        htmlPanelGrid.getChildren().add(organizacionValue);
        
        HtmlOutputText idiomaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idiomaLabel.setId("idiomaLabel");
        idiomaLabel.setValue("Idioma:");
        htmlPanelGrid.getChildren().add(idiomaLabel);
        
        HtmlOutputText idiomaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        idiomaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{nombreDeOrganizacionBean.nombreDeOrganizacion.idioma}", Idioma.class));
        idiomaValue.setConverter(new IdiomaConverter());
        htmlPanelGrid.getChildren().add(idiomaValue);
        
        HtmlOutputText estadoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        estadoLabel.setId("estadoLabel");
        estadoLabel.setValue("Estado:");
        htmlPanelGrid.getChildren().add(estadoLabel);
        
        HtmlOutputText estadoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        estadoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{nombreDeOrganizacionBean.nombreDeOrganizacion.estado}", Estado.class));
        estadoValue.setConverter(new EstadoConverter());
        htmlPanelGrid.getChildren().add(estadoValue);
        
        return htmlPanelGrid;
    }
    
    public NombreDeOrganizacion NombreDeOrganizacionBean.getNombreDeOrganizacion() {
        if (nombreDeOrganizacion == null) {
            nombreDeOrganizacion = new NombreDeOrganizacion();
        }
        return nombreDeOrganizacion;
    }
    
    public void NombreDeOrganizacionBean.setNombreDeOrganizacion(NombreDeOrganizacion nombreDeOrganizacion) {
        this.nombreDeOrganizacion = nombreDeOrganizacion;
    }
    
    public List<Organizacion> NombreDeOrganizacionBean.completeOrganizacion(String query) {
        List<Organizacion> suggestions = new ArrayList<Organizacion>();
        for (Organizacion organizacion : Organizacion.findAllOrganizacions()) {
            String organizacionStr = String.valueOf(organizacion.getFechaDeInicio() +  " "  + organizacion.getFechaDeFinalizacion() +  " "  + organizacion.getOrganizacionid());
            if (organizacionStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(organizacion);
            }
        }
        return suggestions;
    }
    
    public List<Idioma> NombreDeOrganizacionBean.completeIdioma(String query) {
        List<Idioma> suggestions = new ArrayList<Idioma>();
        for (Idioma idioma : Idioma.findAllIdiomas()) {
            String idiomaStr = String.valueOf(idioma.getDenominacion() +  " "  + idioma.getIdentificadorISO() +  " "  + idioma.getNombreISO() +  " "  + idioma.getIdiomaid());
            if (idiomaStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(idioma);
            }
        }
        return suggestions;
    }
    
    public List<Estado> NombreDeOrganizacionBean.completeEstado(String query) {
        List<Estado> suggestions = new ArrayList<Estado>();
        for (Estado estado : Estado.findAllEstadoes()) {
            String estadoStr = String.valueOf(estado.getDenominacion() +  " "  + estado.getEstadoid());
            if (estadoStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(estado);
            }
        }
        return suggestions;
    }
    
    public String NombreDeOrganizacionBean.onEdit() {
        return null;
    }
    
    public boolean NombreDeOrganizacionBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void NombreDeOrganizacionBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String NombreDeOrganizacionBean.displayList() {
        createDialogVisible = false;
        findAllNombreDeOrganizacions();
        return "nombreDeOrganizacion";
    }
    
    public String NombreDeOrganizacionBean.displayCreateDialog() {
        nombreDeOrganizacion = new NombreDeOrganizacion();
        createDialogVisible = true;
        return "nombreDeOrganizacion";
    }
    
    public String NombreDeOrganizacionBean.persist() {
        String message = "";
        if (nombreDeOrganizacion.getNombredeorganizacionid() != null) {
            nombreDeOrganizacion.merge();
            message = "message_successfully_updated";
        } else {
            nombreDeOrganizacion.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "NombreDeOrganizacion");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllNombreDeOrganizacions();
    }
    
    public String NombreDeOrganizacionBean.delete() {
        nombreDeOrganizacion.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "NombreDeOrganizacion");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllNombreDeOrganizacions();
    }
    
    public void NombreDeOrganizacionBean.reset() {
        nombreDeOrganizacion = null;
        createDialogVisible = false;
    }
    
    public void NombreDeOrganizacionBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
