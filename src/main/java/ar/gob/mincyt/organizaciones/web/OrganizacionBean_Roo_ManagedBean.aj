// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.gob.mincyt.organizaciones.web;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import javax.faces.convert.DateTimeConverter;

import org.primefaces.component.autocomplete.AutoComplete;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.column.Column;
import org.primefaces.component.datatable.DataTable;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.component.selectbooleancheckbox.SelectBooleanCheckbox;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

import ar.gob.mincyt.organizaciones.domain.Estado;
import ar.gob.mincyt.organizaciones.domain.NombreDeOrganizacion;
import ar.gob.mincyt.organizaciones.domain.Organizacion;
import ar.gob.mincyt.organizaciones.domain.TipoDeCategoria;
import ar.gob.mincyt.organizaciones.web.converter.EstadoConverter;
import ar.gob.mincyt.organizaciones.web.converter.TipoDeCategoriaConverter;
import ar.gob.mincyt.organizaciones.web.util.MessageFactory;

privileged aspect OrganizacionBean_Roo_ManagedBean {
    
    declare @type: OrganizacionBean: @ManagedBean(name = "organizacionBean");
    
    declare @type: OrganizacionBean: @SessionScoped;
    
    private String OrganizacionBean.name = "Organizacions";
    
    private Organizacion OrganizacionBean.organizacion;
    
    private List<Organizacion> OrganizacionBean.allOrganizacions;
    
    private boolean OrganizacionBean.dataVisible = false;
    
    private List<String> OrganizacionBean.columns;
    
    private HtmlPanelGrid OrganizacionBean.createPanelGrid;
    
    private HtmlPanelGrid OrganizacionBean.editPanelGrid;
    
    private HtmlPanelGrid OrganizacionBean.viewPanelGrid;
    
    private boolean OrganizacionBean.createDialogVisible = false;
    
    private List<NombreDeOrganizacion> OrganizacionBean.selectedNombreDeOrganizacions;
    
    @PostConstruct
    public void OrganizacionBean.init() {
        columns = new ArrayList<String>();
        columns.add("fechaDeInicio");
        columns.add("fechaDeFinalizacion");
    }
    
    public String OrganizacionBean.getName() {
        return name;
    }
    
    public List<String> OrganizacionBean.getColumns() {
        return columns;
    }
    
    public List<Organizacion> OrganizacionBean.getAllOrganizacions() {
        return allOrganizacions;
    }
    
    public void OrganizacionBean.setAllOrganizacions(List<Organizacion> allOrganizacions) {
        this.allOrganizacions = allOrganizacions;
    }
    
    public String OrganizacionBean.findAllOrganizacions() {
        allOrganizacions = Organizacion.findAllOrganizacions();
        dataVisible = !allOrganizacions.isEmpty();
        return null;
    }
    
    public boolean OrganizacionBean.isDataVisible() {
        return dataVisible;
    }
    
    public void OrganizacionBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid OrganizacionBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void OrganizacionBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid OrganizacionBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void OrganizacionBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid OrganizacionBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void OrganizacionBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid OrganizacionBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel vigenteCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        vigenteCreateOutput.setFor("vigenteCreateInput");
        vigenteCreateOutput.setId("vigenteCreateOutput");
        vigenteCreateOutput.setValue("Vigente:");
        htmlPanelGrid.getChildren().add(vigenteCreateOutput);
        
        SelectBooleanCheckbox vigenteCreateInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        vigenteCreateInput.setId("vigenteCreateInput");
        vigenteCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{organizacionBean.organizacion.vigente}", Boolean.class));
        vigenteCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(vigenteCreateInput);
        
        Message vigenteCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        vigenteCreateInputMessage.setId("vigenteCreateInputMessage");
        vigenteCreateInputMessage.setFor("vigenteCreateInput");
        vigenteCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(vigenteCreateInputMessage);
        
        OutputLabel tipoDeCategoriaCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        tipoDeCategoriaCreateOutput.setFor("tipoDeCategoriaCreateInput");
        tipoDeCategoriaCreateOutput.setId("tipoDeCategoriaCreateOutput");
        tipoDeCategoriaCreateOutput.setValue("Tipo De Categoria:");
        htmlPanelGrid.getChildren().add(tipoDeCategoriaCreateOutput);
        
        AutoComplete tipoDeCategoriaCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        tipoDeCategoriaCreateInput.setId("tipoDeCategoriaCreateInput");
        tipoDeCategoriaCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{organizacionBean.organizacion.tipoDeCategoria}", TipoDeCategoria.class));
        tipoDeCategoriaCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{organizacionBean.completeTipoDeCategoria}", List.class, new Class[] { String.class }));
        tipoDeCategoriaCreateInput.setDropdown(true);
        tipoDeCategoriaCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "tipoDeCategoria", String.class));
        tipoDeCategoriaCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{tipoDeCategoria.denominacion} #{tipoDeCategoria.tipodecategoriaid}", String.class));
        tipoDeCategoriaCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{tipoDeCategoria}", TipoDeCategoria.class));
        tipoDeCategoriaCreateInput.setConverter(new TipoDeCategoriaConverter());
        tipoDeCategoriaCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(tipoDeCategoriaCreateInput);
        
        Message tipoDeCategoriaCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tipoDeCategoriaCreateInputMessage.setId("tipoDeCategoriaCreateInputMessage");
        tipoDeCategoriaCreateInputMessage.setFor("tipoDeCategoriaCreateInput");
        tipoDeCategoriaCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tipoDeCategoriaCreateInputMessage);
        
        OutputLabel estadoCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        estadoCreateOutput.setFor("estadoCreateInput");
        estadoCreateOutput.setId("estadoCreateOutput");
        estadoCreateOutput.setValue("Estado:");
        htmlPanelGrid.getChildren().add(estadoCreateOutput);
        
        AutoComplete estadoCreateInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        estadoCreateInput.setId("estadoCreateInput");
        estadoCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{organizacionBean.organizacion.estado}", Estado.class));
        estadoCreateInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{organizacionBean.completeEstado}", List.class, new Class[] { String.class }));
        estadoCreateInput.setDropdown(true);
        estadoCreateInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "estado", String.class));
        estadoCreateInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{estado.denominacion} #{estado.estadoid}", String.class));
        estadoCreateInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{estado}", Estado.class));
        estadoCreateInput.setConverter(new EstadoConverter());
        estadoCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(estadoCreateInput);
        
        Message estadoCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        estadoCreateInputMessage.setId("estadoCreateInputMessage");
        estadoCreateInputMessage.setFor("estadoCreateInput");
        estadoCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(estadoCreateInputMessage);
        
        OutputLabel fechaDeInicioCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        fechaDeInicioCreateOutput.setFor("fechaDeInicioCreateInput");
        fechaDeInicioCreateOutput.setId("fechaDeInicioCreateOutput");
        fechaDeInicioCreateOutput.setValue("Fecha De Inicio:");
        htmlPanelGrid.getChildren().add(fechaDeInicioCreateOutput);
        
        Calendar fechaDeInicioCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        fechaDeInicioCreateInput.setId("fechaDeInicioCreateInput");
        fechaDeInicioCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{organizacionBean.organizacion.fechaDeInicio}", Date.class));
        fechaDeInicioCreateInput.setNavigator(true);
        fechaDeInicioCreateInput.setEffect("slideDown");
        fechaDeInicioCreateInput.setPattern("dd/MM/yyyy");
        fechaDeInicioCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(fechaDeInicioCreateInput);
        
        Message fechaDeInicioCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fechaDeInicioCreateInputMessage.setId("fechaDeInicioCreateInputMessage");
        fechaDeInicioCreateInputMessage.setFor("fechaDeInicioCreateInput");
        fechaDeInicioCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fechaDeInicioCreateInputMessage);
        
        OutputLabel fechaDeFinalizacionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        fechaDeFinalizacionCreateOutput.setFor("fechaDeFinalizacionCreateInput");
        fechaDeFinalizacionCreateOutput.setId("fechaDeFinalizacionCreateOutput");
        fechaDeFinalizacionCreateOutput.setValue("Fecha De Finalizacion:");
        htmlPanelGrid.getChildren().add(fechaDeFinalizacionCreateOutput);
        
        Calendar fechaDeFinalizacionCreateInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        fechaDeFinalizacionCreateInput.setId("fechaDeFinalizacionCreateInput");
        fechaDeFinalizacionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{organizacionBean.organizacion.fechaDeFinalizacion}", Date.class));
        fechaDeFinalizacionCreateInput.setNavigator(true);
        fechaDeFinalizacionCreateInput.setEffect("slideDown");
        fechaDeFinalizacionCreateInput.setPattern("dd/MM/yyyy");
        fechaDeFinalizacionCreateInput.setRequired(false);
        htmlPanelGrid.getChildren().add(fechaDeFinalizacionCreateInput);
        
        Message fechaDeFinalizacionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fechaDeFinalizacionCreateInputMessage.setId("fechaDeFinalizacionCreateInputMessage");
        fechaDeFinalizacionCreateInputMessage.setFor("fechaDeFinalizacionCreateInput");
        fechaDeFinalizacionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fechaDeFinalizacionCreateInputMessage);
        
        HtmlOutputText nombreDeOrganizacionsCreateOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreDeOrganizacionsCreateOutput.setId("nombreDeOrganizacionsCreateOutput");
        nombreDeOrganizacionsCreateOutput.setValue("Nombre De Organizacions:");
        htmlPanelGrid.getChildren().add(nombreDeOrganizacionsCreateOutput);
        
        HtmlOutputText nombreDeOrganizacionsCreateInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreDeOrganizacionsCreateInput.setId("nombreDeOrganizacionsCreateInput");
        nombreDeOrganizacionsCreateInput.setValue("This relationship is managed from the NombreDeOrganizacion side");
        htmlPanelGrid.getChildren().add(nombreDeOrganizacionsCreateInput);
        
        Message nombreDeOrganizacionsCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        nombreDeOrganizacionsCreateInputMessage.setId("nombreDeOrganizacionsCreateInputMessage");
        nombreDeOrganizacionsCreateInputMessage.setFor("nombreDeOrganizacionsCreateInput");
        nombreDeOrganizacionsCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(nombreDeOrganizacionsCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid OrganizacionBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel vigenteEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        vigenteEditOutput.setFor("vigenteEditInput");
        vigenteEditOutput.setId("vigenteEditOutput");
        vigenteEditOutput.setValue("Vigente:");
        htmlPanelGrid.getChildren().add(vigenteEditOutput);
        
        SelectBooleanCheckbox vigenteEditInput = (SelectBooleanCheckbox) application.createComponent(SelectBooleanCheckbox.COMPONENT_TYPE);
        vigenteEditInput.setId("vigenteEditInput");
        vigenteEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{organizacionBean.organizacion.vigente}", Boolean.class));
        vigenteEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(vigenteEditInput);
        
        Message vigenteEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        vigenteEditInputMessage.setId("vigenteEditInputMessage");
        vigenteEditInputMessage.setFor("vigenteEditInput");
        vigenteEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(vigenteEditInputMessage);
        
        OutputLabel tipoDeCategoriaEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        tipoDeCategoriaEditOutput.setFor("tipoDeCategoriaEditInput");
        tipoDeCategoriaEditOutput.setId("tipoDeCategoriaEditOutput");
        tipoDeCategoriaEditOutput.setValue("Tipo De Categoria:");
        htmlPanelGrid.getChildren().add(tipoDeCategoriaEditOutput);
        
        AutoComplete tipoDeCategoriaEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        tipoDeCategoriaEditInput.setId("tipoDeCategoriaEditInput");
        tipoDeCategoriaEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{organizacionBean.organizacion.tipoDeCategoria}", TipoDeCategoria.class));
        tipoDeCategoriaEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{organizacionBean.completeTipoDeCategoria}", List.class, new Class[] { String.class }));
        tipoDeCategoriaEditInput.setDropdown(true);
        tipoDeCategoriaEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "tipoDeCategoria", String.class));
        tipoDeCategoriaEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{tipoDeCategoria.denominacion} #{tipoDeCategoria.tipodecategoriaid}", String.class));
        tipoDeCategoriaEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{tipoDeCategoria}", TipoDeCategoria.class));
        tipoDeCategoriaEditInput.setConverter(new TipoDeCategoriaConverter());
        tipoDeCategoriaEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(tipoDeCategoriaEditInput);
        
        Message tipoDeCategoriaEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        tipoDeCategoriaEditInputMessage.setId("tipoDeCategoriaEditInputMessage");
        tipoDeCategoriaEditInputMessage.setFor("tipoDeCategoriaEditInput");
        tipoDeCategoriaEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(tipoDeCategoriaEditInputMessage);
        
        OutputLabel estadoEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        estadoEditOutput.setFor("estadoEditInput");
        estadoEditOutput.setId("estadoEditOutput");
        estadoEditOutput.setValue("Estado:");
        htmlPanelGrid.getChildren().add(estadoEditOutput);
        
        AutoComplete estadoEditInput = (AutoComplete) application.createComponent(AutoComplete.COMPONENT_TYPE);
        estadoEditInput.setId("estadoEditInput");
        estadoEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{organizacionBean.organizacion.estado}", Estado.class));
        estadoEditInput.setCompleteMethod(expressionFactory.createMethodExpression(elContext, "#{organizacionBean.completeEstado}", List.class, new Class[] { String.class }));
        estadoEditInput.setDropdown(true);
        estadoEditInput.setValueExpression("var", expressionFactory.createValueExpression(elContext, "estado", String.class));
        estadoEditInput.setValueExpression("itemLabel", expressionFactory.createValueExpression(elContext, "#{estado.denominacion} #{estado.estadoid}", String.class));
        estadoEditInput.setValueExpression("itemValue", expressionFactory.createValueExpression(elContext, "#{estado}", Estado.class));
        estadoEditInput.setConverter(new EstadoConverter());
        estadoEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(estadoEditInput);
        
        Message estadoEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        estadoEditInputMessage.setId("estadoEditInputMessage");
        estadoEditInputMessage.setFor("estadoEditInput");
        estadoEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(estadoEditInputMessage);
        
        OutputLabel fechaDeInicioEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        fechaDeInicioEditOutput.setFor("fechaDeInicioEditInput");
        fechaDeInicioEditOutput.setId("fechaDeInicioEditOutput");
        fechaDeInicioEditOutput.setValue("Fecha De Inicio:");
        htmlPanelGrid.getChildren().add(fechaDeInicioEditOutput);
        
        Calendar fechaDeInicioEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        fechaDeInicioEditInput.setId("fechaDeInicioEditInput");
        fechaDeInicioEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{organizacionBean.organizacion.fechaDeInicio}", Date.class));
        fechaDeInicioEditInput.setNavigator(true);
        fechaDeInicioEditInput.setEffect("slideDown");
        fechaDeInicioEditInput.setPattern("dd/MM/yyyy");
        fechaDeInicioEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(fechaDeInicioEditInput);
        
        Message fechaDeInicioEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fechaDeInicioEditInputMessage.setId("fechaDeInicioEditInputMessage");
        fechaDeInicioEditInputMessage.setFor("fechaDeInicioEditInput");
        fechaDeInicioEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fechaDeInicioEditInputMessage);
        
        OutputLabel fechaDeFinalizacionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        fechaDeFinalizacionEditOutput.setFor("fechaDeFinalizacionEditInput");
        fechaDeFinalizacionEditOutput.setId("fechaDeFinalizacionEditOutput");
        fechaDeFinalizacionEditOutput.setValue("Fecha De Finalizacion:");
        htmlPanelGrid.getChildren().add(fechaDeFinalizacionEditOutput);
        
        Calendar fechaDeFinalizacionEditInput = (Calendar) application.createComponent(Calendar.COMPONENT_TYPE);
        fechaDeFinalizacionEditInput.setId("fechaDeFinalizacionEditInput");
        fechaDeFinalizacionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{organizacionBean.organizacion.fechaDeFinalizacion}", Date.class));
        fechaDeFinalizacionEditInput.setNavigator(true);
        fechaDeFinalizacionEditInput.setEffect("slideDown");
        fechaDeFinalizacionEditInput.setPattern("dd/MM/yyyy");
        fechaDeFinalizacionEditInput.setRequired(false);
        htmlPanelGrid.getChildren().add(fechaDeFinalizacionEditInput);
        
        Message fechaDeFinalizacionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        fechaDeFinalizacionEditInputMessage.setId("fechaDeFinalizacionEditInputMessage");
        fechaDeFinalizacionEditInputMessage.setFor("fechaDeFinalizacionEditInput");
        fechaDeFinalizacionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(fechaDeFinalizacionEditInputMessage);
        
        HtmlOutputText nombreDeOrganizacionsEditOutput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreDeOrganizacionsEditOutput.setId("nombreDeOrganizacionsEditOutput");
        nombreDeOrganizacionsEditOutput.setValue("Nombre De Organizacions:");
        htmlPanelGrid.getChildren().add(nombreDeOrganizacionsEditOutput);
        
        //HtmlOutputText nombreDeOrganizacionsEditInput = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        
        ValueExpression tableValueExp =  
        		facesContext.getApplication().getExpressionFactory().createValueExpression(elContext, "#{organizacionBean.organizacion.nombreDeOrganizacions.toArray()}", Object.class);
        DataTable table = (DataTable) application.createComponent(DataTable.COMPONENT_TYPE);
        table.setValueExpression("value", tableValueExp);
        table.setVar("n");

        Column col = (Column) application.createComponent(Column.COMPONENT_TYPE);
        col.setHeaderText("Nombres");
        ValueExpression colValueExp =  
        		facesContext.getApplication().getExpressionFactory().createValueExpression(elContext, "#{n.denominacion}", Object.class);
        HtmlOutputText colOutput = (HtmlOutputText)application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        colOutput.setValueExpression("value", colValueExp);
        col.getChildren().add(colOutput);
        table.getChildren().add(col);

        col = (Column) application.createComponent(Column.COMPONENT_TYPE);
        col.setHeaderText("Es denominacion preferida?");
        colValueExp =  
        		facesContext.getApplication().getExpressionFactory().createValueExpression(elContext, "#{n.esDenominacionPreferida}", Object.class);
        colOutput = (HtmlOutputText)application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        colOutput.setValueExpression("value", colValueExp);
        col.getChildren().add(colOutput);
        table.getChildren().add(col);
        
//        nombreDeOrganizacionsEditInput.setId("nombreDeOrganizacionsEditInput");
//        nombreDeOrganizacionsEditInput.setValue("This relationship is managed from the NombreDeOrganizacion side");
        
//        htmlPanelGrid.getChildren().add(nombreDeOrganizacionsEditInput);
        htmlPanelGrid.getChildren().add(table);
        
//        Message nombreDeOrganizacionsEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
//        nombreDeOrganizacionsEditInputMessage.setId("nombreDeOrganizacionsEditInputMessage");
//        nombreDeOrganizacionsEditInputMessage.setFor("nombreDeOrganizacionsEditInput");
//        nombreDeOrganizacionsEditInputMessage.setDisplay("icon");
//        htmlPanelGrid.getChildren().add(nombreDeOrganizacionsEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid OrganizacionBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText vigenteLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        vigenteLabel.setId("vigenteLabel");
        vigenteLabel.setValue("Vigente:");
        htmlPanelGrid.getChildren().add(vigenteLabel);
        
        HtmlOutputText vigenteValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        vigenteValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{organizacionBean.organizacion.vigente}", String.class));
        htmlPanelGrid.getChildren().add(vigenteValue);
        
        HtmlOutputText tipoDeCategoriaLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoDeCategoriaLabel.setId("tipoDeCategoriaLabel");
        tipoDeCategoriaLabel.setValue("Tipo De Categoria:");
        htmlPanelGrid.getChildren().add(tipoDeCategoriaLabel);
        
        HtmlOutputText tipoDeCategoriaValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        tipoDeCategoriaValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{organizacionBean.organizacion.tipoDeCategoria}", TipoDeCategoria.class));
        tipoDeCategoriaValue.setConverter(new TipoDeCategoriaConverter());
        htmlPanelGrid.getChildren().add(tipoDeCategoriaValue);
        
        HtmlOutputText estadoLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        estadoLabel.setId("estadoLabel");
        estadoLabel.setValue("Estado:");
        htmlPanelGrid.getChildren().add(estadoLabel);
        
        HtmlOutputText estadoValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        estadoValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{organizacionBean.organizacion.estado}", Estado.class));
        estadoValue.setConverter(new EstadoConverter());
        htmlPanelGrid.getChildren().add(estadoValue);
        
        HtmlOutputText fechaDeInicioLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fechaDeInicioLabel.setId("fechaDeInicioLabel");
        fechaDeInicioLabel.setValue("Fecha De Inicio:");
        htmlPanelGrid.getChildren().add(fechaDeInicioLabel);
        
        HtmlOutputText fechaDeInicioValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fechaDeInicioValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{organizacionBean.organizacion.fechaDeInicio}", Date.class));
        DateTimeConverter fechaDeInicioValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        fechaDeInicioValueConverter.setPattern("dd/MM/yyyy");
        fechaDeInicioValue.setConverter(fechaDeInicioValueConverter);
        htmlPanelGrid.getChildren().add(fechaDeInicioValue);
        
        HtmlOutputText fechaDeFinalizacionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fechaDeFinalizacionLabel.setId("fechaDeFinalizacionLabel");
        fechaDeFinalizacionLabel.setValue("Fecha De Finalizacion:");
        htmlPanelGrid.getChildren().add(fechaDeFinalizacionLabel);
        
        HtmlOutputText fechaDeFinalizacionValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        fechaDeFinalizacionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{organizacionBean.organizacion.fechaDeFinalizacion}", Date.class));
        DateTimeConverter fechaDeFinalizacionValueConverter = (DateTimeConverter) application.createConverter(DateTimeConverter.CONVERTER_ID);
        fechaDeFinalizacionValueConverter.setPattern("dd/MM/yyyy");
        fechaDeFinalizacionValue.setConverter(fechaDeFinalizacionValueConverter);
        htmlPanelGrid.getChildren().add(fechaDeFinalizacionValue);
        
        HtmlOutputText nombreDeOrganizacionsLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreDeOrganizacionsLabel.setId("nombreDeOrganizacionsLabel");
        nombreDeOrganizacionsLabel.setValue("Nombre De Organizacions:");
        htmlPanelGrid.getChildren().add(nombreDeOrganizacionsLabel);
        
        HtmlOutputText nombreDeOrganizacionsValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        nombreDeOrganizacionsValue.setId("nombreDeOrganizacionsValue");
        nombreDeOrganizacionsValue.setValue("This relationship is managed from the NombreDeOrganizacion side");
        htmlPanelGrid.getChildren().add(nombreDeOrganizacionsValue);
        
        return htmlPanelGrid;
    }
    
    public Organizacion OrganizacionBean.getOrganizacion() {
        if (organizacion == null) {
            organizacion = new Organizacion();
        }
        return organizacion;
    }
    
    public void OrganizacionBean.setOrganizacion(Organizacion organizacion) {
        this.organizacion = organizacion;
    }
    
    public List<TipoDeCategoria> OrganizacionBean.completeTipoDeCategoria(String query) {
        List<TipoDeCategoria> suggestions = new ArrayList<TipoDeCategoria>();
        for (TipoDeCategoria tipoDeCategoria : TipoDeCategoria.findAllTipoDeCategorias()) {
            String tipoDeCategoriaStr = String.valueOf(tipoDeCategoria.getDenominacion() +  " "  + tipoDeCategoria.getTipodecategoriaid());
            if (tipoDeCategoriaStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(tipoDeCategoria);
            }
        }
        return suggestions;
    }
    
    public List<Estado> OrganizacionBean.completeEstado(String query) {
        List<Estado> suggestions = new ArrayList<Estado>();
        for (Estado estado : Estado.findAllEstadoes()) {
            String estadoStr = String.valueOf(estado.getDenominacion() +  " "  + estado.getEstadoid());
            if (estadoStr.toLowerCase().startsWith(query.toLowerCase())) {
                suggestions.add(estado);
            }
        }
        return suggestions;
    }
    
    public List<NombreDeOrganizacion> OrganizacionBean.getSelectedNombreDeOrganizacions() {
        return selectedNombreDeOrganizacions;
    }
    
    public void OrganizacionBean.setSelectedNombreDeOrganizacions(List<NombreDeOrganizacion> selectedNombreDeOrganizacions) {
        if (selectedNombreDeOrganizacions != null) {
            organizacion.setNombreDeOrganizacions(new HashSet<NombreDeOrganizacion>(selectedNombreDeOrganizacions));
        }
        this.selectedNombreDeOrganizacions = selectedNombreDeOrganizacions;
    }
    
    public String OrganizacionBean.onEdit() {
        if (organizacion != null && organizacion.getNombreDeOrganizacions() != null) {
            selectedNombreDeOrganizacions = new ArrayList<NombreDeOrganizacion>(organizacion.getNombreDeOrganizacions());
        }
        return null;
    }
    
    public boolean OrganizacionBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void OrganizacionBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String OrganizacionBean.displayList() {
        createDialogVisible = false;
        findAllOrganizacions();
        return "organizacion";
    }
    
    public String OrganizacionBean.displayCreateDialog() {
        organizacion = new Organizacion();
        createDialogVisible = true;
        return "organizacion";
    }
    
    public String OrganizacionBean.persist() {
        String message = "";
        if (organizacion.getOrganizacionid() != null) {
            organizacion.merge();
            message = "message_successfully_updated";
        } else {
            organizacion.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Organizacion");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllOrganizacions();
    }
    
    public String OrganizacionBean.delete() {
        organizacion.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Organizacion");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllOrganizacions();
    }
    
    public void OrganizacionBean.reset() {
        organizacion = null;
        selectedNombreDeOrganizacions = null;
        createDialogVisible = false;
    }
    
    public void OrganizacionBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
