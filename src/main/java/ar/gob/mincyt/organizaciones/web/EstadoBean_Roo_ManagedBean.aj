// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.gob.mincyt.organizaciones.web;

import ar.gob.mincyt.organizaciones.domain.Estado;
import ar.gob.mincyt.organizaciones.web.EstadoBean;
import ar.gob.mincyt.organizaciones.web.util.MessageFactory;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.component.html.HtmlOutputText;
import javax.faces.component.html.HtmlPanelGrid;
import javax.faces.context.FacesContext;
import org.primefaces.component.inputtext.InputText;
import org.primefaces.component.message.Message;
import org.primefaces.component.outputlabel.OutputLabel;
import org.primefaces.context.RequestContext;
import org.primefaces.event.CloseEvent;

privileged aspect EstadoBean_Roo_ManagedBean {
    
    declare @type: EstadoBean: @ManagedBean(name = "estadoBean");
    
    declare @type: EstadoBean: @SessionScoped;
    
    private String EstadoBean.name = "Estadoes";
    
    private Estado EstadoBean.estado;
    
    private List<Estado> EstadoBean.allEstadoes;
    
    private boolean EstadoBean.dataVisible = false;
    
    private List<String> EstadoBean.columns;
    
    private HtmlPanelGrid EstadoBean.createPanelGrid;
    
    private HtmlPanelGrid EstadoBean.editPanelGrid;
    
    private HtmlPanelGrid EstadoBean.viewPanelGrid;
    
    private boolean EstadoBean.createDialogVisible = false;
    
    @PostConstruct
    public void EstadoBean.init() {
        columns = new ArrayList<String>();
        columns.add("denominacion");
    }
    
    public String EstadoBean.getName() {
        return name;
    }
    
    public List<String> EstadoBean.getColumns() {
        return columns;
    }
    
    public List<Estado> EstadoBean.getAllEstadoes() {
        return allEstadoes;
    }
    
    public void EstadoBean.setAllEstadoes(List<Estado> allEstadoes) {
        this.allEstadoes = allEstadoes;
    }
    
    public String EstadoBean.findAllEstadoes() {
        allEstadoes = Estado.findAllEstadoes();
        dataVisible = !allEstadoes.isEmpty();
        return null;
    }
    
    public boolean EstadoBean.isDataVisible() {
        return dataVisible;
    }
    
    public void EstadoBean.setDataVisible(boolean dataVisible) {
        this.dataVisible = dataVisible;
    }
    
    public HtmlPanelGrid EstadoBean.getCreatePanelGrid() {
        if (createPanelGrid == null) {
            createPanelGrid = populateCreatePanel();
        }
        return createPanelGrid;
    }
    
    public void EstadoBean.setCreatePanelGrid(HtmlPanelGrid createPanelGrid) {
        this.createPanelGrid = createPanelGrid;
    }
    
    public HtmlPanelGrid EstadoBean.getEditPanelGrid() {
        if (editPanelGrid == null) {
            editPanelGrid = populateEditPanel();
        }
        return editPanelGrid;
    }
    
    public void EstadoBean.setEditPanelGrid(HtmlPanelGrid editPanelGrid) {
        this.editPanelGrid = editPanelGrid;
    }
    
    public HtmlPanelGrid EstadoBean.getViewPanelGrid() {
        return populateViewPanel();
    }
    
    public void EstadoBean.setViewPanelGrid(HtmlPanelGrid viewPanelGrid) {
        this.viewPanelGrid = viewPanelGrid;
    }
    
    public HtmlPanelGrid EstadoBean.populateCreatePanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel denominacionCreateOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        denominacionCreateOutput.setFor("denominacionCreateInput");
        denominacionCreateOutput.setId("denominacionCreateOutput");
        denominacionCreateOutput.setValue("Denominacion:");
        htmlPanelGrid.getChildren().add(denominacionCreateOutput);
        
        InputText denominacionCreateInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        denominacionCreateInput.setId("denominacionCreateInput");
        denominacionCreateInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{estadoBean.estado.denominacion}", String.class));
        denominacionCreateInput.setRequired(true);
        htmlPanelGrid.getChildren().add(denominacionCreateInput);
        
        Message denominacionCreateInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        denominacionCreateInputMessage.setId("denominacionCreateInputMessage");
        denominacionCreateInputMessage.setFor("denominacionCreateInput");
        denominacionCreateInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(denominacionCreateInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid EstadoBean.populateEditPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        OutputLabel denominacionEditOutput = (OutputLabel) application.createComponent(OutputLabel.COMPONENT_TYPE);
        denominacionEditOutput.setFor("denominacionEditInput");
        denominacionEditOutput.setId("denominacionEditOutput");
        denominacionEditOutput.setValue("Denominacion:");
        htmlPanelGrid.getChildren().add(denominacionEditOutput);
        
        InputText denominacionEditInput = (InputText) application.createComponent(InputText.COMPONENT_TYPE);
        denominacionEditInput.setId("denominacionEditInput");
        denominacionEditInput.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{estadoBean.estado.denominacion}", String.class));
        denominacionEditInput.setRequired(true);
        htmlPanelGrid.getChildren().add(denominacionEditInput);
        
        Message denominacionEditInputMessage = (Message) application.createComponent(Message.COMPONENT_TYPE);
        denominacionEditInputMessage.setId("denominacionEditInputMessage");
        denominacionEditInputMessage.setFor("denominacionEditInput");
        denominacionEditInputMessage.setDisplay("icon");
        htmlPanelGrid.getChildren().add(denominacionEditInputMessage);
        
        return htmlPanelGrid;
    }
    
    public HtmlPanelGrid EstadoBean.populateViewPanel() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        javax.faces.application.Application application = facesContext.getApplication();
        ExpressionFactory expressionFactory = application.getExpressionFactory();
        ELContext elContext = facesContext.getELContext();
        
        HtmlPanelGrid htmlPanelGrid = (HtmlPanelGrid) application.createComponent(HtmlPanelGrid.COMPONENT_TYPE);
        
        HtmlOutputText denominacionLabel = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        denominacionLabel.setId("denominacionLabel");
        denominacionLabel.setValue("Denominacion:");
        htmlPanelGrid.getChildren().add(denominacionLabel);
        
        HtmlOutputText denominacionValue = (HtmlOutputText) application.createComponent(HtmlOutputText.COMPONENT_TYPE);
        denominacionValue.setId("denominacionValue");
        denominacionValue.setValueExpression("value", expressionFactory.createValueExpression(elContext, "#{estadoBean.estado.denominacion}", String.class));
        htmlPanelGrid.getChildren().add(denominacionValue);
        
        return htmlPanelGrid;
    }
    
    public Estado EstadoBean.getEstado() {
        if (estado == null) {
            estado = new Estado();
        }
        return estado;
    }
    
    public void EstadoBean.setEstado(Estado estado) {
        this.estado = estado;
    }
    
    public String EstadoBean.onEdit() {
        return null;
    }
    
    public boolean EstadoBean.isCreateDialogVisible() {
        return createDialogVisible;
    }
    
    public void EstadoBean.setCreateDialogVisible(boolean createDialogVisible) {
        this.createDialogVisible = createDialogVisible;
    }
    
    public String EstadoBean.displayList() {
        createDialogVisible = false;
        findAllEstadoes();
        return "estado";
    }
    
    public String EstadoBean.displayCreateDialog() {
        estado = new Estado();
        createDialogVisible = true;
        return "estado";
    }
    
    public String EstadoBean.persist() {
        String message = "";
        if (estado.getEstadoid() != null) {
            estado.merge();
            message = "message_successfully_updated";
        } else {
            estado.persist();
            message = "message_successfully_created";
        }
        RequestContext context = RequestContext.getCurrentInstance();
        context.execute("createDialogWidget.hide()");
        context.execute("editDialogWidget.hide()");
        
        FacesMessage facesMessage = MessageFactory.getMessage(message, "Estado");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllEstadoes();
    }
    
    public String EstadoBean.delete() {
        estado.remove();
        FacesMessage facesMessage = MessageFactory.getMessage("message_successfully_deleted", "Estado");
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        reset();
        return findAllEstadoes();
    }
    
    public void EstadoBean.reset() {
        estado = null;
        createDialogVisible = false;
    }
    
    public void EstadoBean.handleDialogClose(CloseEvent event) {
        reset();
    }
    
}
